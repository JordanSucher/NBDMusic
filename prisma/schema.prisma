generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String?
  bio           String?   // User biography
  url           String?   // User website/social media URL
  createdAt     DateTime  @default(now())
  
  accounts Account[]
  sessions Session[]
  releases Release[]
  listens  Listen[]
  playlists Playlist[]
  
  // Follow relationships
  following Follow[] @relation("Follower")
  followers Follow[] @relation("Following")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String   // User who is following
  followingId String   // User being followed
  createdAt   DateTime @default(now())
  
  follower    User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId]) // Prevent duplicate follows
  @@index([followerId])
  @@index([followingId])
}

model Release {
  id          String   @id @default(cuid())
  title       String
  description String?
  releaseType String   @default("single") // "single", "ep", "album", "demo"
  releaseDate DateTime? // Optional release date
  artworkUrl  String?  // New field for release artwork
  uploadedAt  DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tracks      Track[]
  tags        ReleaseTag[]
  
  @@index([userId])
  @@index([uploadedAt])
}

model Track {
  id          String   @id @default(cuid())
  title       String
  trackNumber Int      @default(1)
  fileName    String
  fileUrl     String
  fileSize    Int
  duration    Int?     // in seconds
  mimeType    String
  lyrics      String?  // optional lyrics field
  
  releaseId   String
  release     Release  @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  
  listens     Listen[]
  playlistTracks PlaylistTrack[]
  
  @@index([releaseId])
}

model Tag {
  id       String @id @default(cuid())
  name     String @unique
  releases ReleaseTag[]
}

model ReleaseTag {
  releaseId String
  tagId     String
  
  release Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([releaseId, tagId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  used    Boolean  @default(false)
  
  @@index([email])
  @@index([token])
}

model Listen {
  id        String   @id @default(cuid())
  trackId   String
  userId    String?  // nullable to allow anonymous listens
  listenedAt DateTime @default(now())
  ipAddress String?  // for anonymous tracking and abuse prevention
  userAgent String?  // for analytics
  
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([trackId])
  @@index([userId])
  @@index([listenedAt])
  @@index([ipAddress])
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isSystem    Boolean  @default(false) // true for system playlists like "Liked Songs"
  isPublic    Boolean  @default(false) // for future public playlist feature
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tracks      PlaylistTrack[]
  
  @@index([userId])
  @@index([isSystem])
  @@unique([userId, name]) // prevent duplicate playlist names per user
}

model PlaylistTrack {
  id         String   @id @default(cuid())
  position   Int      // order within playlist
  addedAt    DateTime @default(now())
  
  playlistId String
  trackId    String
  
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@index([playlistId])
  @@index([trackId])
  @@unique([playlistId, trackId]) // prevent duplicate tracks in same playlist
}
